{"intents": [
        {"tag": "is_on",
         "patterns": ["[]", "array", "for","for each", "foreach","for x in array", "for in", "for (int i = 0; i < n; i++) {a[i] = INT;}", "what time complexity", "time complexity", "time"],
         "responses": ["The time complexity for this code is O(n)"],
         "context": ["time complexity"]
        },
        {"tag": "o1_example",
         "patterns": ["what is an example of o(1)", "o(1)", "o(1) example", "o1", "o1 pseudocode"],
         "responses": ["Accessing Array Index (int a = ARR[5];)", "Inserting a node in Linked List","Pushing and Poping on Stack","Insertion and Removal from Queue","Finding out the parent or left/right child of a node in a tree stored in Array","Jumping to Next/Previous element in Doubly Linked List"],
         "context": ["example"]
        },
        {"tag": "on_example",
         "patterns": ["what is an example of o(n)", "o(n)", "o(n) example", "on", "on pseudocode"],
         "responses": ["Traversing an array","Traversing a linked list","Linear Search","Deletion of a specific element in a Linked List (Not sorted)","Comparing two strings"],
         "context": ["example"]
        },
        {"tag": "ologn_example",
         "patterns": ["what is an example of o(log n)", "o(log n)", "o(log n) example", "o log n", "o log n pseudocode"],
         "responses": ["Binary Search","Finding largest/smallest number in a binary search tree","Certain Divide and Conquer Algorithms based on Linear functionality","Calculating Fibonacci Numbers"],
         "context": ["example"]
        },
        {"tag": "onlogn_example",
         "patterns": ["what is an example of o(n log n)", "o(n log n)", "o(n log n) example", "o n log n", "o n log n pseudocode"],
         "responses": ["Merge Sort", "Heap Sort", "Quick Sort"],
         "context": ["example"]
        },
        {"tag": "bubble_pseudocode",
         "patterns": ["bubble sort","what is bubble sort", "bubble", "bubble sort pseudocode", "bubble pseudocode"],
         "responses": ["begin BubbleSort(list)  for all elements of list if list[i] > list[i+1] swap(list[i], list[i+1])end if end for return list    end BubbleSort"],
         "context": ["pseudocode"]
        },
        {"tag": "merge_pseudocode",
         "patterns": ["merge sort","what is merge sort", "merge", "merge sort pseudocode", "merge pseudocode"],
         "responses": ["    step 1: start       step 2: declare array and left, right, mid variable    step 3: perform merge function.        if left > right    return         mid= (left+right)/2        mergesort(array, left, mid)        mergesort(array, mid+1, right)     merge(array, left, mid, right)     step 4: Stop"],
         "context": ["pseudocode"]
        },
        {"tag": "insertion_pseudocode",
         "patterns": ["insertion sort","what is insertion sort", "insertion", "insertion sort pseudocode", "insertion pseudocode"],
         "responses": ["procedure insertionSort( A : array of items )   int holePosition        int valueToInsert       for i = 1 to length(A) inclusive do:    /* select value to be inserted */       valueToInsert = A[i]    holePosition = i        /*locate hole position for the element to be inserted */                while holePosition > 0 and A[holePosition-1] > valueToInsert do:                A[holePosition] = A[holePosition-1]             holePosition = holePosition -1          end while               /* insert the number at hole position */                A[holePosition] = valueToInsert         end for                         end procedure"],
         "context": ["pseudocode"]
        },
        {"tag": "greeting",
         "patterns": ["Hi there", "How are you", "Is anyone there?","Hey","Hola", "Hello", "Good day"],
         "responses": ["Hello, thanks for asking", "Good to see you again", "Hi there, how can I help?"],
         "context": [""]
        },
        {"tag": "goodbye",
         "patterns": ["Bye", "See you later", "Goodbye", "Nice chatting to you, bye", "Till next time"],
         "responses": ["See you!", "Have a nice day", "Bye! Come back again soon."],
         "context": [""]
        },
        {"tag": "thanks",
         "patterns": ["Thanks", "Thank you", "That's helpful", "Awesome, thanks", "Thanks for helping me"],
         "responses": ["Happy to help!", "Any time!", "My pleasure"],
         "context": [""]
        },
        {"tag": "noanswer",
         "patterns": [],
         "responses": ["Sorry, can't understand you. Feel free to message a TA or professor using the links in this site"],
         "context": [""]
        }
   ]
}
